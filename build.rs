use serde::Deserialize;
use serde_yaml;
use std::fs::{self, File};
use std::io::Write;

#[derive(Deserialize, Debug)]
#[allow(non_snake_case)]
struct Config {
    L: usize,
    precision: String,
    n_threads: usize,
    n_tries: usize,
    job_name: Option<String>,
    params: Option<Vec<f64>>,
}

fn build_config_file(config: &Config) -> std::io::Result<()> {
    let mut file = File::create("./src/config.rs")?;
    writeln!(file, "// This file is autogenerated from build.rs")?;

    match config.precision.as_str() {
        "f32" => writeln!(file, "pub type Precision = f32;")?,
        "f64" => writeln!(file, "pub type Precision = f64;")?,
        "f256" => {
            writeln!(file, "use f256::f256;")?;
            writeln!(file, "pub type Precision = f256;")?;
        }
        _ => panic!("Precision {} not supported.", config.precision),
    }

    writeln!(file, "pub const L: usize = {};", config.L)?;
    writeln!(file, "pub const N_THREADS: usize = {};", config.n_threads)?;
    writeln!(file, "pub const N_TRIES: usize = {};", config.n_tries)?;
    writeln!(file, "pub const N_RES: usize = (L-1)*(L-2)+L*(L-2) + 2*L;")?;
    writeln!(file, "pub const N_UNK: usize = L * (L - 2);")?;

    Ok(())
}

fn build_job_file(config: &Config) -> std::io::Result<()> {
    if let (Some(job_name), Some(params)) = (&config.job_name, &config.params) {
        let mut content = fs::read_to_string("utils/template.job")?;
        content = content.replace("JOBNAME", job_name);
        content = content.replace("N_THREADS", format!("{}", &config.n_threads).as_str());

        for p in params.iter() {
            content.push_str(&format!("./solver {}\n", p));
            content.push_str("cp isosurfaces*.out *.x *.r $OUTDIR\n");
        }

        fs::write("utils/solver.job", content)?;
    }

    Ok(())
}

fn main() -> std::io::Result<()> {
    let yaml = File::open("config.yaml")?;
    let config: Config = serde_yaml::from_reader(yaml).expect("Failed at yaml deserialization.");

    build_config_file(&config).expect("Failed at building config.rs file");
    build_job_file(&config).expect("Failed at building solver.job file");

    Ok(())
}
